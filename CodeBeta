#David Ruiz
#@viajatech 


import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import random
import queue

# Configuración de la simulación
MAX_REPLICAS = 10  # Número máximo de réplicas
SCAN_INTERVAL = 2  # Intervalo entre cada escaneo (en segundos)
REPLICATE_INTERVAL = 3  # Intervalo entre cada replicación (en segundos)

# Lista simulada de dispositivos en la red
SIMULATED_DEVICES = [f"192.168.1.{i}" for i in range(1, 21)]  # 20 dispositivos

class SimulationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contagio by Viaja Tech")
        self.root.geometry("800x600")
        self.root.resizable(False, False)

        # Variables de estado
        self.is_scanning = False
        self.is_replicating = False
        self.discovered_devices = []
        self.replicated_devices = []
        self.log_queue = queue.Queue()

        # Configuración de la GUI
        self.create_widgets()

        # Iniciar el hilo de actualización del log
        self.root.after(100, self.process_log_queue)

    def create_widgets(self):
        # Frame de configuración
        config_frame = ttk.LabelFrame(self.root, text="Configuración")
        config_frame.pack(fill="x", padx=10, pady=5)

        ttk.Label(config_frame, text="Máximo de Réplicas:").grid(row=0, column=0, padx=5, pady=5, sticky='e')
        self.max_replicas_var = tk.IntVar(value=MAX_REPLICAS)
        ttk.Entry(config_frame, textvariable=self.max_replicas_var, width=10).grid(row=0, column=1, padx=5, pady=5, sticky='w')

        ttk.Label(config_frame, text="Intervalo de Escaneo (s):").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.scan_interval_var = tk.IntVar(value=SCAN_INTERVAL)
        ttk.Entry(config_frame, textvariable=self.scan_interval_var, width=10).grid(row=1, column=1, padx=5, pady=5, sticky='w')

        ttk.Label(config_frame, text="Intervalo de Replicación (s):").grid(row=2, column=0, padx=5, pady=5, sticky='e')
        self.replicate_interval_var = tk.IntVar(value=REPLICATE_INTERVAL)
        ttk.Entry(config_frame, textvariable=self.replicate_interval_var, width=10).grid(row=2, column=1, padx=5, pady=5, sticky='w')

        # Frame de control
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill="x", padx=10, pady=5)

        self.start_button = ttk.Button(control_frame, text="Iniciar Simulación", command=self.start_simulation)
        self.start_button.pack(side='left', padx=5)

        self.stop_button = ttk.Button(control_frame, text="Detener Simulación", command=self.stop_simulation, state='disabled')
        self.stop_button.pack(side='left', padx=5)

        # Frame de visualización de dispositivos
        devices_frame = ttk.LabelFrame(self.root, text="Dispositivos Descubiertos")
        devices_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.devices_tree = ttk.Treeview(devices_frame, columns=("IP", "Estado"), show='headings')
        self.devices_tree.heading("IP", text="Dirección IP")
        self.devices_tree.heading("Estado", text="Estado")
        self.devices_tree.column("IP", width=150, anchor='center')
        self.devices_tree.column("Estado", width=100, anchor='center')
        self.devices_tree.pack(fill="both", expand=True, padx=5, pady=5)

        # Frame de registro de actividades
        log_frame = ttk.LabelFrame(self.root, text="Registro de Actividades")
        log_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.log_text = scrolledtext.ScrolledText(log_frame, state='disabled', height=10)
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)

    def start_simulation(self):
        # Actualizar parámetros según la configuración
        self.max_replicas = self.max_replicas_var.get()
        self.scan_interval = self.scan_interval_var.get()
        self.replicate_interval = self.replicate_interval_var.get()

        # Validar parámetros
        if self.max_replicas < 1:
            messagebox.showerror("Error de Configuración", "El número máximo de réplicas debe ser al menos 1.")
            return
        if self.scan_interval < 1:
            messagebox.showerror("Error de Configuración", "El intervalo de escaneo debe ser al menos 1 segundo.")
            return
        if self.replicate_interval < 1:
            messagebox.showerror("Error de Configuración", "El intervalo de replicación debe ser al menos 1 segundo.")
            return

        # Iniciar escaneo y replicación en hilos separados
        self.is_scanning = True
        self.is_replicating = True
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')

        self.log_queue.put("Simulación iniciada.\n")
        self.log_queue.put(f"Máximo de réplicas: {self.max_replicas}\n")
        self.log_queue.put(f"Intervalo de escaneo: {self.scan_interval} segundos\n")
        self.log_queue.put(f"Intervalo de replicación: {self.replicate_interval} segundos\n")

        threading.Thread(target=self.scan_network, daemon=True).start()
        threading.Thread(target=self.replicate, daemon=True).start()

    def stop_simulation(self):
        self.is_scanning = False
        self.is_replicating = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        self.log_queue.put("Simulación detenida.\n")

    def scan_network(self):
        while self.is_scanning:
            self.log_queue.put("Iniciando escaneo de red...\n")
            # Simulación de escaneo: seleccionar dispositivos aleatorios
            discovered = random.sample(SIMULATED_DEVICES, random.randint(1, 5))
            for device in discovered:
                if device not in self.discovered_devices:
                    self.discovered_devices.append(device)
                    self.log_queue.put(f"Dispositivo descubierto: {device}\n")
                    self.devices_tree.insert("", "end", values=(device, "Disponible"))
            time.sleep(self.scan_interval)

    def replicate(self):
        while self.is_replicating and len(self.replicated_devices) < self.max_replicas:
            time.sleep(self.replicate_interval)
            if not self.discovered_devices:
                self.log_queue.put("No hay dispositivos disponibles para replicar.\n")
                continue
            target = random.choice(self.discovered_devices)
            if target not in self.replicated_devices:
                self.replicated_devices.append(target)
                self.log_queue.put(f"Replicando en: {target}\n")
                # Actualizar estado en el árbol
                for item in self.devices_tree.get_children():
                    if self.devices_tree.item(item, 'values')[0] == target:
                        self.devices_tree.item(item, values=(target, "Replicado"))
                        break
            else:
                self.log_queue.put(f"Ya se ha replicado en: {target}\n")
        if len(self.replicated_devices) >= self.max_replicas:
            self.log_queue.put("Se ha alcanzado el número máximo de réplicas.\n")
            self.stop_simulation()

    def process_log_queue(self):
        while not self.log_queue.empty():
            log = self.log_queue.get()
            self.log_text.config(state='normal')
            self.log_text.insert(tk.END, log)
            self.log_text.see(tk.END)
            self.log_text.config(state='disabled')
        self.root.after(100, self.process_log_queue)

def main():
    root = tk.Tk()
    app = SimulationApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
